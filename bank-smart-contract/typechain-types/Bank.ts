/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface BankInterface extends utils.Interface {
  functions: {
    "bulkTransfer(string,string[],uint256)": FunctionFragment;
    "checkAccountExist(string)": FunctionFragment;
    "creatAccount(string)": FunctionFragment;
    "deposit(string)": FunctionFragment;
    "getAccountBalance(string)": FunctionFragment;
    "getCurrentAccountList()": FunctionFragment;
    "getCurrentFund()": FunctionFragment;
    "getOwner()": FunctionFragment;
    "healthCheck()": FunctionFragment;
    "transfer(string,string,uint256)": FunctionFragment;
    "withdraw(string,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "bulkTransfer"
      | "checkAccountExist"
      | "creatAccount"
      | "deposit"
      | "getAccountBalance"
      | "getCurrentAccountList"
      | "getCurrentFund"
      | "getOwner"
      | "healthCheck"
      | "transfer"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "bulkTransfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "checkAccountExist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "creatAccount",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAccountBalance",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentAccountList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCurrentFund",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "healthCheck",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "bulkTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkAccountExist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatAccount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAccountBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentAccountList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCurrentFund",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "healthCheck",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {};
}

export interface Bank extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: BankInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bulkTransfer(
      fromAccountName: PromiseOrValue<string>,
      toAccountNames: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    checkAccountExist(
      checkAccountName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    creatAccount(
      creatAccountName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deposit(
      toAccountName: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAccountBalance(
      checkAccountName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCurrentAccountList(overrides?: CallOverrides): Promise<[string[]]>;

    getCurrentFund(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    healthCheck(overrides?: CallOverrides): Promise<[string]>;

    transfer(
      fromAccountName: PromiseOrValue<string>,
      toAccountName: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      fromAccountName: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  bulkTransfer(
    fromAccountName: PromiseOrValue<string>,
    toAccountNames: PromiseOrValue<string>[],
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  checkAccountExist(
    checkAccountName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  creatAccount(
    creatAccountName: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deposit(
    toAccountName: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAccountBalance(
    checkAccountName: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCurrentAccountList(overrides?: CallOverrides): Promise<string[]>;

  getCurrentFund(overrides?: CallOverrides): Promise<BigNumber>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  healthCheck(overrides?: CallOverrides): Promise<string>;

  transfer(
    fromAccountName: PromiseOrValue<string>,
    toAccountName: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    fromAccountName: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    bulkTransfer(
      fromAccountName: PromiseOrValue<string>,
      toAccountNames: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    checkAccountExist(
      checkAccountName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    creatAccount(
      creatAccountName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    deposit(
      toAccountName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAccountBalance(
      checkAccountName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentAccountList(overrides?: CallOverrides): Promise<string[]>;

    getCurrentFund(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    healthCheck(overrides?: CallOverrides): Promise<string>;

    transfer(
      fromAccountName: PromiseOrValue<string>,
      toAccountName: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdraw(
      fromAccountName: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    bulkTransfer(
      fromAccountName: PromiseOrValue<string>,
      toAccountNames: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    checkAccountExist(
      checkAccountName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creatAccount(
      creatAccountName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deposit(
      toAccountName: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAccountBalance(
      checkAccountName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCurrentAccountList(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentFund(overrides?: CallOverrides): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    healthCheck(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      fromAccountName: PromiseOrValue<string>,
      toAccountName: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      fromAccountName: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    bulkTransfer(
      fromAccountName: PromiseOrValue<string>,
      toAccountNames: PromiseOrValue<string>[],
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    checkAccountExist(
      checkAccountName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creatAccount(
      creatAccountName: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deposit(
      toAccountName: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAccountBalance(
      checkAccountName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentAccountList(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCurrentFund(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    healthCheck(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      fromAccountName: PromiseOrValue<string>,
      toAccountName: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      fromAccountName: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
